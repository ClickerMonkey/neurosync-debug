/* rekord-debug 1.4.1 - A rekord binding to console - implementing Rekord.debug by Philip Diffenderfer */
!function(e,l){function o(e){return e instanceof l.Model?"["+e.$db.className+":"+e.$db.summarize(e)+"] ":e instanceof l.Database?"["+e.className+"] ":e instanceof l.Relation?"["+e.database.className+":"+e.type+":"+e.model.Database.className+"] ":e instanceof l.Operation?"["+e.type+"] ":!1}function d(e,l){var d=o(e);if(d!==!1)return d;for(var a=0;a<l.length;a++){var d=o(l[a]);if(d!==!1)return d}return"[Rekord] "}if(e.console){var a=e.console;l.debugMap={0:"Created",1:"REST",2:"Remote data received, existing model updated",3:"Remote data received, new model created",4:"Model remotely removed, removed locally",5:"Models loaded remotely",6:"Offline, failed loading models remotely",7:"Error loading remote models",8:"Saved model removed locally because it does not exist remotely",9:"Models loaded locally",10:"Model deleted locally, resuming remote deletion",11:"Model loaded but not saved, resuming save",12:"Model loaded",73:"Auto-refresh",13:"Real-time save",14:"Real-time removal",15:"Model saved values",16:"Model save published",17:"Model save failure, conflicted",18:"Model update failure, does not exist remotely",19:"Model save error for",20:"Model save failure, offline!",21:"Model save resume",22:"Models loading remotely resumed",23:"Model saved locally",24:"Model failed to save locally, will still try to save it remotely",25:"Model saved remotely",26:"Model remove published",27:"Model removed locally",28:"Model remove failure, does not exist remotely",29:"Model remove error",30:"Model remove failure, offline!",31:"Model remove resume",32:"Model removed remotely",33:"Model removed locally",34:"Model failed to remove locally, will still try to remove it remotely",104:"Model local get skipped",105:"Model local get",106:"Model local get error",107:"Model remote get",108:"Model remote get error",35:"Application Online",36:"Application Offline",37:"LIVE",38:"Model local save ineffective, model is deleted",39:"Model local save blocked, waiting until previous operation finishes",40:"Model save ineffective, model is deleted",41:"Model remote save ineffective, model is deleted",42:"Model remove save blocked, waiting until previous operation finishes",43:"Model remote remove blocked, waiting until previous operation finishes",44:"Model local remove blocked, waiting until previous operation finishes",45:"Model local remove ineffective, no local model to remove",46:"Model local remove effective, unsaved model removed",47:"Model had a pending save that was canceled by remove",48:"Model update blocked with older revision",49:"Model ninja removed",51:"Initial pulled from model",52:"Initial value loaded",53:"Initialized",54:"Relation cleared",55:"Relation set",56:"Pre-save",57:"Post-remove",58:"Clear key",59:"Set key",60:"Loaded",111:"Query",112:"Query results",61:"Initialized",62:"Model ninja removed",63:"Model ninja saved",64:"Initial pulled from model",65:"Initial value loaded",66:"Relation cleared",67:"Relation set",69:"Post-remove",70:"Clear key",71:"Set key",72:"Loaded",113:"Query",114:"Query results",74:"Initialized",75:"Model ninja removed",76:"Model ninja saved",77:"Initial value loaded",78:"Initial pulled from model",79:"Model removed",80:"Models sorted",81:"Model added",82:"Models lazily loaded",83:"Model grabbed based on initial",84:"Model ninja added",85:"Auto-saving",86:"Pre-remove",87:"Post-save",115:"Query",116:"Query results",88:"Initialized",89:"Model ninja removed",90:"Model ninja saved",91:"Through ninja removed",92:"Initial value loaded",93:"Initial pulled from model",94:"Model removed",95:"Models sorted",96:"Model added",97:"Models lazily loaded",98:"Model grabbed based on initial",99:"Model ninja added",100:"Auto-saving",101:"Pre-remove",102:"Post-save",103:"Through added",68:"Through removed",117:"Query",118:"Query results",50:"Initialized",121:"Models sorted",109:"Model ninja removed",110:"Model ninja saved",119:"Query",120:"Query results"},l.debugExclude=[],l.debugInclude=!1,l.debugNoData=[],l.debugWithData=!1,l.debugTrace=!1,l.debugStyle="color:blue; font-weight:bold",l.debug=function(e,o){if(l.debugInclude!==!1){if(l.indexOf(l.debugInclude,e)===!1)return}else if(l.indexOf(l.debugExclude,e)!==!1)return;if(e in l.debugMap){var r=Array.prototype.slice.call(arguments,1);l.debugWithData!==!1?l.indexOf(l.debugWithData,e)===!1&&(r=[]):l.indexOf(l.debugNoData,e)!==!1&&(r=[]);var i=d(o,r),t=l.debugMap[e];if(l.debugTrace&&r.push(new Error),r.length&&a.groupCollapsed){a.groupCollapsed("%c"+i+t,l.debugStyle);for(var n=0;n<r.length;n++)a.log(r[n]);a.groupEnd()}else a.log("%c"+i+t,l.debugStyle)}else if(arguments.length>1&&a.groupCollapsed){a.groupCollapsed("%c"+arguments[0],l.debugStyle);for(var n=1;n<arguments.length;n++)a.log(arguments[n]);a.groupEnd()}else a.log.apply(a,arguments)}}}(this,this.Rekord);
//# sourceMappingURL=rekord-debug.min.js.map
